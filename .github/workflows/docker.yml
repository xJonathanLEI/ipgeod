name: "Build multi-arch images"

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  image-info:
    name: "Extract image info"
    runs-on: "ubuntu-latest"
    outputs:
      repo: ${{ steps.derive.outputs.repo }}
      version: ${{ steps.derive.outputs.version }}

    env:
      DOCKER_REPOSITORY: "xjonathanlei/ipgeod"

    steps:
      - id: "derive"
        name: "Derive crate info from Git tag"
        run: |
          echo "repo=$DOCKER_REPOSITORY" >> $GITHUB_OUTPUT

          FULL_REF="${{ github.ref }}"
          REGEX="^refs\/tags\/v(.*)$"
          [[ $FULL_REF =~ $REGEX ]];

          echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT

  build-amd64:
    name: "Build for linux/amd64"
    runs-on: "ubuntu-latest"
    needs:
      - "image-info"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Build Docker image"
        run: |
          docker build -t ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-amd64 -f ./Dockerfile .

      - name: "Export Docker image"
        run: |
          docker save ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-amd64 | gzip > /tmp/amd64.tar.gz

      - name: "Upload Docker image artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "amd64.tar.gz"
          path: "/tmp/amd64.tar.gz"

  build-arm64:
    name: "Build for linux/arm64"
    runs-on: "ubuntu-latest"
    needs:
      - "image-info"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set up Docker Buildx"
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          sudo systemctl restart docker
          docker buildx create --name multi_builder
          docker buildx use multi_builder

      - name: "Build Docker image"
        run: |
          docker buildx build \
            --platform "linux/arm64/v8" \
            --output=type=docker \
            -t ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-arm64 -f ./Dockerfile .

      - name: "Export Docker image"
        run: |
          docker save ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-arm64 | gzip > /tmp/arm64.tar.gz

      - name: "Upload Docker image artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "arm64.tar.gz"
          path: "/tmp/arm64.tar.gz"

  push:
    name: "Push multi-arch manifest"
    runs-on: "ubuntu-latest"
    needs:
      - "build-amd64"
      - "build-arm64"
      - "image-info"

    steps:
      - name: "Login to Docker Hub"
        uses: "docker/login-action@v1.6.0"
        with:
          username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

      - name: "Download linux/amd64 image"
        uses: "actions/download-artifact@v3"
        with:
          name: "amd64.tar.gz"
          path: "/tmp/"

      - name: "Download linux/arm64/v8 image"
        uses: "actions/download-artifact@v3"
        with:
          name: "arm64.tar.gz"
          path: "/tmp/"

      - name: "Load Docker images"
        run: |
          docker load < /tmp/amd64.tar.gz
          docker load < /tmp/arm64.tar.gz

      - name: "Push Docker images"
        run: |
          docker push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-amd64
          docker push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-arm64
          docker manifest create ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }} \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-amd64 \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-arm64
          docker manifest create ${{ needs.image-info.outputs.repo }}:latest \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-amd64 \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}-arm64
          docker manifest push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.version }}
          docker manifest push ${{ needs.image-info.outputs.repo }}:latest
